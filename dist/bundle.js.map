{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/Game.js","webpack:///./src/js/Render.js","webpack:///./src/js/Vectrors.js","webpack:///./src/js/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA,CAAqC;AACM;AAC3C,YAAY,gDAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAO;AAC1B;AACA;AACA;AACA,QAAQ,+CAAO;AACf,QAAQ,+CAAO;AACf,0BAA0B,8CAAM;AAChC;AACA;AACA;AACA;AACgB;AAChB,gC;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA,CAAmC;AAC5B;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8CAAI,EAAE,iBAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE,6EAA6E;AAC7E,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA,uCAAuC;AACvC,6CAA6C;AAC7C;AACA,0CAA0C,IAAI,WAAW,IAAI,SAAS,GAAG,eAAe,KAAK,YAAY,KAAK,SAAS,EAAE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA,CAAoC;AACpC,qBAAqB,+CAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,KAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,sDAAsD;AACtD,6CAA6C;AAC7C,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;AACxB,oC;;;;;;;;;;;;AChJA;AAAA;AAAA,CAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0CAAI;AACrB;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC,uBAAuB,gBAAgB;AACvC;AACA,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAC1B;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,YAAY,iBAAiB;AAC7B,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/index.js\");\n","﻿import { Vector } from \"./Vectrors\";\nimport { Setting, Render } from \"./Render\";\nlet s = new Vector(4, 5);\n//\n// class DyPoint extends Point {\n//     typ: string = 'DyPoint';\n//     vel: Vector;\n//     acc: Vector;\n//     size: number = 10;\n//     par: Point;\n//     grav = new Vector(0,0.1);\n//     dist: number;\n//\n//     constructor(pos: Position, size?: number) {\n//         super(pos, size);\n//         this.vel = new Vector();\n//         this.acc = new Vector(0,0);\n//         this.size = size || 5;\n//     }\n//\n//     move() {\n//\n//\n//\n//         let distance = Vector.distance(this, this.par);\n//\n//         this.acc.y =  distance.length -this.acc.y;\n//         this.acc.x = distance.length - this.acc.x;\n//\n//         this.vel.x +=  this.acc.x;\n//         this.vel.y +=  this.acc.y;\n//\n//         this.x += this.vel.x;\n//         this.y += this.vel.y;\n//\n//\n//     }\n//\n//     animate() {\n//\n//         this.draw();\n//         this.move();\n//\n//         // let o = this;\n//         // let id = setInterval(function () {\n//         //     o.draw();\n//         //     o.move();\n//         // }, 16.6)\n//     }\n// }\n//\n// interface ISet {\n//     canvas: HTMLCanvasElement;\n//     ctx: CanvasRenderingContext2D;\n//     fixedPoints: Position;\n//     point: Position;\n// }\nclass Game extends Setting {\n    constructor(setting) {\n        super();\n        // this.set.ctx = setting.canvas.getContext(\"2d\");\n        Setting.prototype.setting = setting;\n        Setting.prototype.setting.Vpoints = [];\n        this.render = new Render();\n        console.log(this.render.setting);\n        // this.init();\n    }\n}\nexport { Game };\n//# sourceMappingURL=Game.js.map","﻿import { Node } from \"./Vectrors\";\nexport class Setting {\n}\nexport class Render extends Setting {\n    constructor() {\n        super();\n        this.points = [];\n        this.setting.ctx.shadowColor = 'rgba(65,152,211,0.65)';\n        this.setting.ctx.shadowBlur = 10;\n        // this.setting.ctx.scale( window.devicePixelRatio, window.devicePixelRatio);\n        this.add();\n    }\n    clear() {\n        this.setting.ctx.clearRect(0, 0, this.setting.width, this.setting.height);\n    }\n    add() {\n        for (let p of this.setting.points) {\n            this.setting.Vpoints.push(new Node({ x: p.x, y: p.y }, 5, p.type));\n        }\n        this.draw();\n    }\n    draw() {\n        this.setting.ctx.clearRect(0, 0, this.setting.width, this.setting.height);\n        let lock = 200;\n        let power = 0.01;\n        let r = 0.02;\n        // for (let p1 of this.points) {\n        //     if(p1.type === 'static') continue;\n        //     for (let p2 of this.points) {\n        //\n        //         if (p1 !== p2) {\n        //                 let distance = Vector.pointDistance(p1, p2); // дистаниця\n        //                 let fVector = Vector.vectorAB(p1, p2).normalize(); // вектор силы\n        //                 let diff = distance - lock; // относительное растяжение стержня (+)\n        //                 //  let f =    ((power  * diff) + p1.vel.x*r + p1.acc.x;\n        //                 //  let fy =  (power * diff) + p1.vel.y*r + p1.acc.y;\n        //                 //  // let fy =  (power * diff) + (p1.vel.y*r) + (p1.acc.y*0.000000001 );\n        //                 //  // let fy =       (power * diff) + (p1.acc.y*r) ;\n        //                 //  // let f = (100 )/;\n        //                 //  console.log (\"distance: \",distance );\n        //                 //  // console.log (\"fVector: \", fVector);\n        //                 //  // console.log (\"diff: \", diff);\n        //                 //  // console.log ('res:  = ', (fVector.x * diff * power));\n        //                 //  // console.log ('accc:  = ', p1.acc.x);\n        //                 //\n        //                 //  p1.acc.x +=  ( fVector.x * f ) ;\n        //                 //  p1.acc.y += (fVector.y * fy) ;\n        //\n        //\n        //\n        //\n        //             let plus = (diff/(80));\n        //             p1.x += (plus*fVector.x );\n        //             p1.y += (plus*fVector.y );\n        //             // p2.x -= (plus*fVector.x );\n        //             //     p2.y -= (plus*fVector.y );\n        //\n        //\n        //         }\n        //     }\n        // }\n        for (let p1 of this.setting.Vpoints) {\n            p1.move();\n            p1.update();\n            p1.draw();\n        }\n        for (let p1 of this.setting.Vpoints) {\n            for (let p2 of this.setting.Vpoints) {\n                if (p1 !== p2) {\n                    this.setting.ctx.beginPath();\n                    this.setting.ctx.moveTo(p1.x, p1.y);\n                    this.setting.ctx.lineTo(p2.x, p2.y);\n                    this.setting.ctx.strokeStyle = 'rgba(81,184,255,0.76)';\n                    this.setting.ctx.lineWidth = 1.5;\n                    this.setting.ctx.stroke();\n                }\n            }\n        }\n    }\n    stopAnimate() {\n        cancelAnimationFrame(this.RID);\n    }\n    animate() {\n        this.draw();\n        this.RID = requestAnimationFrame(() => this.animate());\n        // setTimeout(()=>this.animate(), 100)\n        // function guk(){\n        //\n        //     let blength = 50;\n        //     let k = 0.1;\n        //\n        //     let x1 = 0;\n        //     let x2 = 75;\n        //     let vx2 = 0;\n        //     let ax2 = 0;\n        //     let r = 0.2;\n        //\n        //     for (let i=0 ; i < 1000; i++){\n        //\n        //\n        //         let dist = x2 - x1 ; // distance\n        //         let diff = dist - blength; // relative length\n        //         let f = -(k*diff) ;\n        //         console.log(/* `ax2: ${ax2}`, `vx2: ${vx2}`,`px: ${x2}`, */ `dist: ${dist}`, `diff: ${diff}`, `f: ${f}`     )\n        //\n        //         ax2 = f * r;\n        //         vx2 = vx2 + ax2;\n        //         x2 = x2 + vx2;\n        //\n        //     }\n        // }\n    }\n}\n//# sourceMappingURL=Render.js.map","﻿import { Setting } from \"./Render\";\nclass Vector extends Setting {\n    constructor(x, y) {\n        super();\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n    get length() {\n        return Math.sqrt(this.x ** 2 + this.y ** 2);\n    }\n    normalize() {\n        let length = this.length;\n        return new Vector(this.x / length, this.y / length);\n    }\n    static vectorAB(a, b) {\n        return new Vector(b.x - a.x, b.y - a.y);\n    }\n    static distanceAB(a, b) {\n        return Math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2);\n    }\n}\nclass StructManager {\n}\nclass Struct {\n    constructor(type) {\n        this.type = 'web' || 'line';\n        this.type = type;\n        return this;\n    }\n    add(edge) {\n        this.edges.push(edge);\n    }\n}\nclass Edge {\n    constructor(first, last) {\n        this.firstNode = first;\n        this.lastNode = last;\n        this.baseLength = Vector.distanceAB(first, last);\n    }\n}\nclass Node extends Vector {\n    constructor(pos, size, type) {\n        super(pos.x, pos.y);\n        this.type = 'Point';\n        this.vel = new Vector(0, 0);\n        this.acc = new Vector(0, 0.5);\n        // grav : number = 0.05;\n        this.oldx = 0;\n        this.oldy = 0;\n        // this.pos = new Vector();\n        this.size = size;\n        this.type = type;\n        this.oldx = this.x;\n        this.oldy = this.y;\n        // this.draw();\n        // this.vel.x = Math.random()*2 ;\n        // this.vel.y = Math.random()*2 ;\n    }\n    move() {\n        if (this.type === 'static')\n            return;\n        if (this.y >= this.setting.height - this.size) {\n            let n = this.y;\n            this.y = this.setting.height - this.size;\n            this.oldy = n;\n            this.oldx = this.x - (this.x - this.oldx) * 0.1;\n        }\n        if (this.y < this.size) {\n            let n = this.y;\n            this.y = this.size;\n            this.oldy = n;\n        }\n        if (this.x > this.setting.width - this.size) {\n            let n = this.x;\n            this.x = this.setting.width - this.size;\n            this.oldx = n;\n        }\n        if (this.x < this.size) {\n            let n = this.x;\n            this.x = this.size;\n            this.oldx = n;\n        }\n        // this.vel.y +=   this.grav;\n        if (this.type !== 'static') {\n            let tempx = this.x;\n            let tempy = this.y;\n            this.x += this.x - this.oldx + this.acc.x ** 2;\n            this.y += this.y - this.oldy + this.acc.y ** 2;\n            this.oldx = tempx;\n            this.oldy = tempy;\n        }\n        ;\n        // this.oldx = this.x ;\n        // this.oldy = this.y;\n    }\n    update() {\n        let lock = 100;\n        for (let p2 of this.setting.Vpoints) {\n            // if(p2.type === 'static') continue;\n            if (this !== p2) {\n                let V1V2 = Vector.vectorAB(this, p2); // вектор между вершинами\n                let V1V2_Normalize = V1V2.normalize(); // нормализованный вектор\n                let V1V2Length = V1V2.length; // дистаниця\n                let diff = (V1V2Length - lock) / 20; // разница в длине\n                //  let f =    ((power  * diff) + p1.vel.x*r + p1.acc.x;\n                //  let fy =  (power * diff) + p1.vel.y*r + p1.acc.y;\n                //  // let fy =  (power * diff) + (p1.vel.y*r) + (p1.acc.y*0.000000001 );\n                //  // let fy =       (power * diff) + (p1.acc.y*r) ;\n                //  // let f = (100 )/;\n                //  console.log (\"distance: \",distance );\n                //  // console.log (\"fVector: \", fVector);\n                //  // console.log (\"diff: \", diff);\n                //  // console.log ('res:  = ', (fVector.x * diff * power));\n                //  // console.log ('accc:  = ', p1.acc.x);\n                //\n                //  p1.acc.x +=  ( fVector.x * f ) ;\n                //  p1.acc.y += (fVector.y * fy) ;\n                if (this.type !== 'static') {\n                    this.x += V1V2_Normalize.x * diff;\n                    this.y += V1V2_Normalize.y * diff;\n                }\n                if (p2.type !== 'static') {\n                    p2.x -= V1V2_Normalize.x * diff;\n                    p2.y -= V1V2_Normalize.y * diff;\n                }\n                // let plus = (diff / (80));\n                // p1.x += (plus * fVector.x);\n                // p1.y += (plus * fVector.y);\n                // // p2.x -= (plus*fVector.x );\n                // //     p2.y -= (plus*fVector.y );\n            }\n        }\n    }\n    draw() {\n        this.setting.ctx.beginPath();\n        this.setting.ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI, false);\n        this.setting.ctx.fillStyle = '#eee';\n        this.setting.ctx.fill();\n        // this.setting.ctx.lineWidth = -.0;\n        // this.setting.ctx.strokeStyle = '#000000';\n        // this.setting.ctx.stroke();\n    }\n}\nexport { Vector, Node };\n//# sourceMappingURL=Vectrors.js.map","﻿import { Game } from \"./Game\";\nlet dpr = window.devicePixelRatio;\nconsole.log(dpr);\nlet canvas = window.document.querySelector('canvas');\nlet ctx = canvas.getContext('2d');\nlet button = document.getElementById('button');\ncanvas.width = document.body.clientWidth;\ncanvas.height = document.body.clientHeight;\nconst game = new Game({\n    canvas: canvas,\n    ctx: ctx,\n    width: canvas.width,\n    height: canvas.height,\n    // fixedPoints  : { x:width, y:0 },\n    // fixedPoints  : { x:width, y:20 },\n    points: [\n        { x: 400, y: 50 },\n        { x: 350, y: 150 },\n        { x: 250, y: 200 },\n        //\n        //\n        // { x: 250, y: 200 },\n        //\n        // { x: 250, y: 200 },\n        { x: 300, y: 300 }\n    ]\n});\ngame.render.animate();\nlet resize = window.addEventListener(\"resize\", () => {\n    console.log('resize');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    game.setting.width = window.innerWidth;\n    game.setting.height = window.innerHeight;\n    // game.setting.ctx.scale( 1/window.devicePixelRatio, 1/window.devicePixelRatio);\n});\n// let start_button  = button.addEventListener(\"click\", ()=>{\n//    game.render.animate();\n// });\nlet pushDot = () => {\n    canvas.addEventListener('click', (e) => {\n        let x = e.offsetX;\n        let y = e.offsetY;\n    });\n};\nlet log = console.log;\n// let s = new DeviceAcceleration();\n// function accelerometerUpdate(event) {\n//     var aX = event.accelerationIncludingGravity.x*10;\n//     var aY = event.accelerationIncludingGravity.y*10;\n//     var aZ = event.accelerationIncludingGravity.z*10;\n//\n//\n//     document.querySelector(\"#button\").innerHTML = aX;\n//     document.querySelector(\"#button\").innerHTML = aY;\n//     document.querySelector(\"#button\").innerHTML = aZ;\n//\n//     // ix aY is negative, switch rotation\n//     // if (aY <0) {\n//     //     aX = -aX - 180;\n//     // }\n//     // // document.querySelector(\"#block\").style.transform=\"rotate(\"+aX+\"deg)\";\n//\n// }\n// let OM = class  {\n//     x:number;\n//     y:number;\n//     constructor(x,y){\n//         this.x = x ;\n//         this.y = y ;\n//     }\n//     foo () {\n//         log(this.x,this.y);\n//     };\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}