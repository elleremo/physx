{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/Game.js","webpack:///./src/js/Render.js","webpack:///./src/js/Vectrors.js","webpack:///./src/js/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;AACA,gDAAwC;AACxC;AACA,8CAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,WAAG;AACH;AACA;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA,CAAoD;AACX;AACzC,YAAY,gDAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA,0BAA0B,8CAAM;AAChC,QAAQ,6CAAK,qBAAqB,uDAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;AAChB,gC;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA,CAAQ;AACR;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA,uCAAuC;AACvC,6CAA6C;AAC7C;AACA,0CAA0C,IAAI,WAAW,IAAI,SAAS,GAAG,eAAe,KAAK,YAAY,KAAK,SAAS,EAAE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAkC;AAC3B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,6BAA6B,KAAM,IAAI,KAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,uCAAuC,OAAO,MAAM;AACpD;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb,QAAQ,6CAAK;AACb,QAAQ,6CAAK;AACb,QAAQ,6CAAK;AACb,QAAQ,6CAAK;AACb,QAAQ,6CAAK;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA,qBAAqB,6CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,uDAAuD;AACvD,8CAA8C;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,UAAU;AACV;AACA;AACA,QAAQ,6CAAK;AACb,QAAQ,6CAAK;AACb,QAAQ,6CAAK;AACb,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;AC7KA;AAAA;AAAA;AAAA;AAAA,CAA+B;AACkB;AAChB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0CAAI;AACrB;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC,uBAAuB,gBAAgB;AACvC;AACA,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,wCAAwC;AACxC;AACA,IAAI,6CAAK;AACT,IAAI,6CAAK;AACT;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAM;AAChC,QAAQ,6CAAK;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,iCAAiC,+CAAK,EAAE,OAAO,KAAK;AACpD;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,uBAAuB,8CAAI,GAAG;AAC9B,wBAAwB,+CAAK,EAAE,OAAO;AACtC;AACA;AACA;AACA;AACA,uBAAuB,8CAAI;AAC3B,wBAAwB,+CAAK,EAAE,OAAO;AACtC;AACA;AACA,0CAA0C;AAC1C,iCAAiC;AACjC,2CAA2C,KAAK;AAChD;AACA;AACA;AACA,0CAA0C;AAC1C,iCAAiC;AACjC,2CAA2C,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// webpack-livereload-plugin\n \t(function() {\n \t  if (typeof window === \"undefined\") { return };\n \t  var id = \"webpack-livereload-plugin-script-264cd78ab88bb695\";\n \t  if (document.getElementById(id)) { return; }\n \t  var el = document.createElement(\"script\");\n \t  el.id = id;\n \t  el.async = true;\n \t  el.src = \"//\" + location.hostname + \":35729/livereload.js\";\n \t  document.getElementsByTagName(\"head\")[0].appendChild(el);\n \t}());\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/index.js\");\n","﻿import { Vector, StructManager } from \"./Vectrors\";\nimport { State, Render } from \"./Render\";\nlet s = new Vector(4, 5);\n//\n// class DyPoint extends Point {\n//     typ: string = 'DyPoint';\n//     vel: Vector;\n//     acc: Vector;\n//     size: number = 10;\n//     par: Point;\n//     grav = new Vector(0,0.1);\n//     dist: number;\n//\n//     constructor(pos: Position, size?: number) {\n//         super(pos, size);\n//         this.vel = new Vector();\n//         this.acc = new Vector(0,0);\n//         this.size = size || 5;\n//     }\n//\n//     move() {\n//\n//\n//\n//         let distance = Vector.distance(this, this.par);\n//\n//         this.acc.y =  distance.length -this.acc.y;\n//         this.acc.x = distance.length - this.acc.x;\n//\n//         this.vel.x +=  this.acc.x;\n//         this.vel.y +=  this.acc.y;\n//\n//         this.x += this.vel.x;\n//         this.y += this.vel.y;\n//\n//\n//     }\n//\n//     animate() {\n//\n//         this.draw();\n//         this.move();\n//\n//         // let o = this;\n//         // let id = setInterval(function () {\n//         //     o.draw();\n//         //     o.move();\n//         // }, 16.6)\n//     }\n// }\n//\n// interface ISet {\n//     canvas: HTMLCanvasElement;\n//     ctx: CanvasRenderingContext2D;\n//     fixedPoints: Position;\n//     point: Position;\n// }\nclass Game {\n    constructor(setting) {\n        // this.set.ctx = setting.canvas.getContext(\"2d\");\n        State.setting = setting;\n        // State.prototype.buffer = [];\n        this.render = new Render();\n        State.structManager = new StructManager();\n        // console.log(this.render.setting);\n        // this.init();\n    }\n    addPoint(point) {\n        // this.render.addOncePoint(point);\n    }\n}\nexport { Game };\n//# sourceMappingURL=Game.js.map","﻿export class State {\n}\nexport class Render {\n    constructor() {\n        this.points = [];\n    }\n    clear() {\n        State.setting.ctx.clearRect(0, 0, State.setting.width, State.setting.height);\n    }\n    // // addOncePoint(point: Point){\n    // //     this.setting.Vpoints.push(point);\n    // // }\n    //\n    // add() {\n    //     for (let p of State.setting.points) {\n    //         State.structManager.buffer.push(new Point({x: p.x, y: p.y}, 5, p.type))\n    //     }\n    //\n    //      this.draw()\n    // }\n    draw() {\n        State.setting.ctx.clearRect(0, 0, State.setting.width, State.setting.height);\n        // if (State.structManager.buffer.length == 0) return;\n        // for (let struct of State.structManager.buffer) {\n        State.structManager.buffer.forEach((struct) => {\n            struct.edges.forEach((edge) => {\n                edge.firstNode.draw();\n                edge.lastNode.draw();\n                edge.draw();\n            });\n        });\n        // p1.move();\n        //\n        // p1.update();\n        //\n        // p1.draw();\n        // }\n    }\n    stopAnimate() {\n        cancelAnimationFrame(this.RID);\n    }\n    animate() {\n        this.draw();\n        this.RID = requestAnimationFrame(() => this.animate());\n        // setTimeout(()=>this.animate(), 100)\n        // function guk(){\n        //\n        //     let blength = 50;\n        //     let k = 0.1;\n        //\n        //     let x1 = 0;\n        //     let x2 = 75;\n        //     let vx2 = 0;\n        //     let ax2 = 0;\n        //     let r = 0.2;\n        //\n        //     for (let i=0 ; i < 1000; i++){\n        //\n        //\n        //         let dist = x2 - x1 ; // distance\n        //         let diff = dist - blength; // relative length\n        //         let f = -(k*diff) ;\n        //         console.log(/* `ax2: ${ax2}`, `vx2: ${vx2}`,`px: ${x2}`, */ `dist: ${dist}`, `diff: ${diff}`, `f: ${f}`     )\n        //\n        //         ax2 = f * r;\n        //         vx2 = vx2 + ax2;\n        //         x2 = x2 + vx2;\n        //\n        //     }\n        // }\n    }\n}\n//# sourceMappingURL=Render.js.map","﻿import { State } from \"./Render\";\nexport class Vector {\n    constructor(x, y) {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n    get length() {\n        return Math.sqrt(this.x ** 2 + this.y ** 2);\n    }\n    normalize() {\n        let length = this.length;\n        return new Vector(this.x / length, this.y / length);\n    }\n    static vectorAB(a, b) {\n        return new Vector(b.x - a.x, b.y - a.y);\n    }\n    static distanceAB(a, b) {\n        return Math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2);\n    }\n}\nexport class StructManager {\n    constructor() {\n        this.structs = [];\n        this.buffer = [];\n    }\n}\nexport class Struct {\n    constructor(type) {\n        this.ponts = [];\n        this.edges = [];\n        this.type = 'web' || 'line' || 'static';\n        this.type = type;\n        return this;\n    }\n    addPoint(x, y) {\n        let countPoints = this.ponts.length;\n        let countEdges = this.edges.length;\n        if (this.ponts.length == 0) { // если это первая точка\n            this.ponts.push(new Point({ x, y }, 5)); // добавляем точку\n        }\n        if (this.ponts.length != 0) { // если точек больше нуля -- нечетное количество ( 1 3 5 )\n        }\n    }\n    addEdge(edge) {\n        this.edges.push(edge);\n        return this;\n    }\n}\nexport class Edge {\n    constructor() {\n        //\n        // this.firstNode = first;\n        // this.lastNode = last;\n        // this.baseLength = Vector.distanceAB(first, last);\n    }\n    solve() {\n    }\n    draw() {\n        State.setting.ctx.beginPath();\n        State.setting.ctx.moveTo(this.firstNode.x, this.firstNode.y);\n        State.setting.ctx.lineTo(this.lastNode.x, this.lastNode.y);\n        State.setting.ctx.strokeStyle = 'rgba(81,184,255,0.76)';\n        State.setting.ctx.lineWidth = 1.5;\n        State.setting.ctx.stroke();\n    }\n}\nexport class Point extends Vector {\n    constructor(pos, size, type = 'Point') {\n        super(pos.x, pos.y);\n        this.type = 'Point';\n        this.vel = new Vector(0, 0);\n        this.acc = new Vector(0, 0);\n        this.grav = 0.2;\n        this.oldx = 0;\n        this.oldy = 0;\n        // this.pos = new Vector();\n        this.size = size;\n        this.type = type;\n        this.oldx = this.x;\n        this.oldy = this.y;\n        this.draw();\n        // this.vel.x = Math.random()*2 ;\n        // this.vel.y = Math.random()*2 ;\n    }\n    move() {\n        if (this.type === 'static')\n            return;\n        // if (this.y < this.size) {\n        //     let n = this.y;\n        //     this.y = this.size  ;\n        //     this.oldy =   n;\n        // }\n        // if (this.x > this.setting.width - this.size) {\n        //     let n = this.x;\n        //     this.x = this.setting.width -this.size;\n        //     this.oldx = n;\n        // }\n        // if (this.x <   this.size ) {\n        //     let n = this.x;\n        //     this.x = this.size;\n        //     this.oldx = n;\n        // }\n        // this.vel.y +=   this.grav;\n        // if (this.type !== 'static') {\n        //     let tempx = this.x;\n        //     let tempy = this.y;\n        //\n        //     this.acc.y += this.grav;\n        //     this.x +=  this.x - this.oldx + this.acc.x ** 2;\n        //     this.y +=  this.y - this.oldy + this.acc.y ** 2;\n        //\n        //     this.oldx = tempx ;\n        //     this.oldy = tempy;\n        // };\n        // this.vel.y += this.acc.y + this.grav;\n        // this.vel.x += this.acc.x ;\n        let x = this.x;\n        let y = this.y;\n        this.x += this.x - this.oldx + this.acc.x ** 2;\n        this.y += this.y - this.oldy + this.acc.y ** 2 + this.grav ** 2;\n        this.oldx = x;\n        this.oldy = y;\n        if (this.y >= State.setting.height - this.size) {\n            let n = this.y;\n            let o = this.oldy;\n            this.y = State.setting.height - this.size;\n            this.oldy = this.y + (n - o);\n            // this.oldx = this.x - (this.x-this.oldx)*0.1;\n            // this.vel.y = -this.vel.y;\n        }\n    }\n    update() {\n        let lock = 100;\n        /* for (let p2 of State.setting.Vpoints) {\n             // if(p2.type === 'static') continue;\n             if (this !== p2) {\n                 let V1V2 = Vector.vectorAB(this, p2); // вектор между вершинами\n                 let V1V2_Normalize = V1V2.normalize(); // нормализованный вектор\n                 let V1V2Length = V1V2.length; // дистаниця\n                 let diff = (V1V2Length - lock) / 20;\n\n                 if (this.type !== 'static') {\n                     this.x += V1V2_Normalize.x * diff;\n                     this.y += V1V2_Normalize.y * diff;\n\n                 }\n                 if (p2.type !== 'static') {\n                     p2.x -= V1V2_Normalize.x * diff;\n                     p2.y -= V1V2_Normalize.y * diff;\n                 }\n\n\n                 // let plus = (diff / (80));\n                 // p1.x += (plus * fVector.x);\n                 // p1.y += (plus * fVector.y);\n                 // // p2.x -= (plus*fVector.x );\n                 // //     p2.y -= (plus*fVector.y );\n\n\n             }\n\n         }*/\n    }\n    draw() {\n        State.setting.ctx.beginPath();\n        State.setting.ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI, false);\n        State.setting.ctx.fillStyle = '#eee';\n        State.setting.ctx.fill();\n        // this.setting.ctx.lineWidth = -.0;\n        // this.setting.ctx.strokeStyle = '#000000';\n        // this.setting.ctx.stroke();\n    }\n}\n//# sourceMappingURL=Vectrors.js.map","﻿import { Game } from \"./Game\";\nimport { Edge, Point, Struct } from \"./Vectrors\";\nimport { State } from \"./Render\";\nlet log = console.log;\nlet dpr = window.devicePixelRatio;\nlet canvas = window.document.querySelector('canvas');\nlet ctx = canvas.getContext('2d');\nlet button = document.getElementById('button');\ncanvas.width = 500;\ncanvas.height = 500;\nlog(canvas.width);\nconst game = new Game({\n    canvas: canvas,\n    ctx: ctx,\n    width: 500,\n    height: 500,\n    // fixedPoints  : { x:width, y:0 },\n    // fixedPoints  : { x:width, y:20 },\n    points: [\n        { x: 100, y: 50 },\n        { x: 250, y: 200 },\n        { x: 400, y: 350 }\n    ]\n});\ngame.render.animate();\nlet KeyMap = window.addEventListener(\"keyup\", (e) => {\n    switch (e.code) {\n        case \"Space\":\n            // game.render.animate();\n            log('space');\n            break;\n        case \"KeyL\":\n            break;\n    }\n});\nlet resize = window.addEventListener(\"resize\", () => {\n    console.log('resize');\n    // canvas.width = window.innerWidth;  // УДОЛИ!\n    // canvas.height = window.innerHeight;\n    State.setting.width = window.innerWidth;\n    State.setting.height = window.innerHeight;\n    // log('width:' + window.innerWidth, 'height: ' + window.innerHeight)\n    // game.setting.ctx.scale( 1/window.devicePixelRatio, 1/window.devicePixelRatio);\n});\n// let start_button  = button.addEventListener(\"click\", ()=>{\n//    game.render.animate();\n// });\nlet o = {\n    clickCount: 0,\n    struct: undefined,\n    lastEdge: undefined,\n    init() {\n        this.struct = new Struct('web');\n        State.structManager.buffer.push(this.struct);\n        o.click();\n    },\n    click: function () {\n        canvas.addEventListener(\"click\", (e) => {\n            this.pushDot(e);\n            this.clickCount++;\n        });\n    },\n    // closure: function(p1){\n    //\n    //     let p2 = p1;\n    //\n    //     return function (p2) {\n    //         return p2 + p1;\n    //     }\n    // },\n    pushDot: function (e) {\n        // ! Не забудь что при обработке движения Edge должны обрабатывать только восстановление расстояний но не\n        // движение точек!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        log('clickCount: ', this.clickCount);\n        let x = e.offsetX;\n        let y = e.offsetY;\n        let point;\n        let edge;\n        if (this.clickCount % 2 != 0) { // если нечетное (1 3 5) / второй клик\n            // let edge = new Edge();\n            this.lastPoint = new Point({ x, y }, 1); // вторая точка\n            log('второй клик');\n        }\n        if (this.clickCount == 4) {\n            log(this.struct);\n        }\n        if (this.clickCount == 0) { // если первый клик\n            edge = new Edge(); // создаем грань\n            point = new Point({ x, y }, 5);\n            edge.firstNode = point;\n            this.lastEdge = edge;\n        }\n        else {\n            edge = new Edge();\n            point = new Point({ x, y }, 5);\n            this.lastEdge.lastNode = point;\n        }\n        // if (this.clickCount % 2 == 0) { // если первый клик\n        //     edge = new Edge(); // создаем грань\n        //     edge.firstNode = new Point({x, y}, 5);\n        //\n        // }\n        //\n        // if (this.clickCount % 2 != 0) { // если второй клик\n        //     edge = new Edge(); // создаем грань\n        //     edge.firstNode = new Point({x, y}, 5);\n        // }\n        //\n        //\n        // edge.firstNode = point1;\n        //\n        // this.lastEdge = edge;\n        this.struct.add(edge);\n        //\n        canvas.addEventListener('mousemove', (e) => {\n            point.x = e.offsetX;\n            point.y = e.offsetY;\n        });\n        // log(pushDot);\n        // let edge = new Edge(point, point);\n        // game.addPoint(point);\n    }\n    //     canvas.addEventListener(\"click\", (e: MouseEvent) => {\n    //\n    // }\n};\no.init();\n// let s = new DeviceAcceleration();\n// function accelerometerUpdate(event) {\n//     var aX = event.accelerationIncludingGravity.x*10;\n//     var aY = event.accelerationIncludingGravity.y*10;\n//     var aZ = event.accelerationIncludingGravity.z*10;\n//\n//\n//     document.querySelector(\"#button\").innerHTML = aX;\n//     document.querySelector(\"#button\").innerHTML = aY;\n//     document.querySelector(\"#button\").innerHTML = aZ;\n//\n//     // ix aY is negative, switch rotation\n//     // if (aY <0) {\n//     //     aX = -aX - 180;\n//     // }\n//     // // document.querySelector(\"#block\").style.transform=\"rotate(\"+aX+\"deg)\";\n//\n// }\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}